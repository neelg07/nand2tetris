// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=ARegIn);

    Not(in=instruction[15], out=Ainstruc);
    Or(a=instruction[5], b=Ainstruc, out=saveAreg);
    ARegister(in=ARegIn, load=saveAreg, out=ARegOut, out[0..14]=addressM);

    // writeM output
    And(a=instruction[15], b=instruction[3], out=writeM);

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AorM);

    DRegister(in=ALUout, load=instruction[4], out=DRegOut);
    ALU(x=DRegOut, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    
    PC(in=ARegOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);

    // PC Load Input Logic //
    And(a=true, b=instruction[15], out=CInstruct);
    DMux8Way(in=CInstruct, sel=instruction[0..2], a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=JMP);

    /* Null path omitted
     * 6 conditional paths formed by combining Dmux outputs with ng/zr bit logic 
    */ 

    Not(in=zr, out=notzr);                  // JGT
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=checkJGT);
    And(a=jgt, b=checkJGT, out=JGT);

    And(a=zr, b=jeq, out=JEQ);              // JEQ

    Or(a=zr, b=notng, out=checkJGE);        // JGE
    And(a=jge, b=checkJGE, out=JGE);

    And(a=ng, b=jlt, out=JLT);              // JLT

    And(a=notzr, b=jne, out=JNE);           // JNE

    Or(a=ng, b=zr, out=ngOrzr);             // JLE
    And(a=ngOrzr, b=jle, out=JLE);

    /* Recombine all paths with Or8way gate
     * If any of the logic paths are true then jump should activate
     * and load will be set to true in PC
     * Null path auto sets one input bit to false
    */ 

    Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JMP, out=pcLoad); 
}